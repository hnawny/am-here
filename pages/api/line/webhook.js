// pages/api/webhook.js
import { Client } from '@line/bot-sdk';
import mysql from 'mysql2/promise';
import crypto from 'crypto';

const config = {
    channelAccessToken: "nWnWPXtcok1IQAXuzZggXDiuENWXc/qlJQ83F7dJYFrE/Z9g/qxXhiTdDjHbB8lkNKsp9jZernoXtRN/+ILYtDAPxJTmbWdyO12I+YoWUX5fIZSe8YV/5bMr3QLNZ1x0lA3Qy81xj1R1xki6olznTAdB04t89/1O/w1cDnyilFU=",
    channelSecret: "a124a86d0cb5a989736be117e6e76788",
};

const client = new Client(config);

const dbConfig = {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
};

const QUERIES = {
    CREATE_TABLE: `
        CREATE TABLE IF NOT EXISTS tickets (
            id VARCHAR(10) PRIMARY KEY,
            userId VARCHAR(255) NOT NULL,
            displayName VARCHAR(255) NOT NULL,
            issue TEXT NOT NULL,
            status ENUM('pending', 'inProgress', 'resolved', 'closed') DEFAULT 'pending',
            chatEnabled BOOLEAN DEFAULT false,
            groupChatId VARCHAR(255),
            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )
    `,
    CREATE_TICKET: `
        INSERT INTO tickets (id, userId, displayName, issue, status)
        VALUES (?, ?, ?, ?, 'pending')
    `,
    GET_USER_TICKETS: `
        SELECT * FROM tickets WHERE userId = ?
    `,
    GET_TICKET: `
        SELECT * FROM tickets WHERE id = ? AND userId = ?
    `,
    GET_TICKET_BY_ID: `
        SELECT * FROM tickets WHERE id = ?
    `,
    UPDATE_CHAT_STATUS: `
        UPDATE tickets SET chatEnabled = ? WHERE id = ? AND userId = ?
    `,
    UPDATE_TICKET_GROUP: `
        UPDATE tickets SET groupChatId = ? WHERE id = ?
    `,
    DELETE_TICKET: `
        DELETE FROM tickets WHERE id = ? AND userId = ?
    `,
    CHECK_STAFF: `
        SELECT * FROM staff WHERE userId = ? AND active = true
    `,
    UPDATE_TICKET_STATUS: `
        UPDATE tickets SET status = ? WHERE id = ?
    `,
    CREATE_STAFF_TABLE: `
        CREATE TABLE IF NOT EXISTS staff (
            id INT AUTO_INCREMENT PRIMARY KEY,
            userId VARCHAR(255) NOT NULL UNIQUE,
            displayName VARCHAR(255) NOT NULL,
            active BOOLEAN DEFAULT true,
            createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    `
};

async function getConnection() {
    try {
        const connection = await mysql.createConnection(dbConfig);
        await connection.execute(QUERIES.CREATE_TABLE);
        await connection.execute(QUERIES.CREATE_STAFF_TABLE);
        return connection;
    } catch (error) {
        console.error('Database connection error:', error);
        throw error;
    }
}

async function isStaff(connection, userId) {
    const [staff] = await connection.execute(QUERIES.CHECK_STAFF, [userId]);
    return staff.length > 0;
}

function generateTicketId() {
    return `TK${crypto.randomBytes(4).toString('hex').toUpperCase()}`;
}

async function createGroupChat(client, connection, ticket, userProfile) {
    try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
        const group = await client.post('/group/create', {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${client.channelAccessToken}`
            },
            data: {
                name: `Ticket#${ticket.id}_${userProfile.displayName}`
            }
        });

        if (!group || !group.groupId) {
            throw new Error('Failed to create group chat');
        }

        // Update ticket with group ID
        await connection.execute(QUERIES.UPDATE_TICKET_GROUP, [group.groupId, ticket.id]);

        // Get staff members
        const [staffMembers] = await connection.execute('SELECT userId FROM staff WHERE active = true');

        // Send invitation link to customer and staff
        const inviteLink = await client.post(`/group/${group.groupId}/invite`, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${client.channelAccessToken}`
            }
        });

        // Send invite link to customer
        await client.pushMessage(ticket.userId, {
            type: 'text',
            text: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ticket #${ticket.id} ‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ:\n${inviteLink.url}`
        });

        // Send invite link to all staff
        for (const staff of staffMembers) {
            await client.pushMessage(staff.userId, {
                type: 'text',
                text: `‡∏°‡∏µ Ticket ‡πÉ‡∏´‡∏°‡πà #${ticket.id}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏ä‡∏ó‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ:\n${inviteLink.url}`
            });
        }

        // Send welcome message to group
        await client.pushMessage(group.groupId, {
            type: 'text',
            text: `üé´ Ticket #${ticket.id}\n\n‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${userProfile.displayName}\n‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${ticket.issue}\n\n‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞`
        });

        return group.groupId;
    } catch (error) {
        console.error('Error creating group chat:', error);
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
}


const welcomeMessage = {
    type: 'flex',
    altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Support Ticket',
    contents: {
        type: 'bubble',
        hero: {
            type: 'image',
            url: 'https://via.placeholder.com/1000x400',
            size: 'full',
            aspectRatio: '20:8',
            aspectMode: 'cover'
        },
        body: {
            type: 'box',
            layout: 'vertical',
            contents: [
                {
                    type: 'text',
                    text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Support',
                    weight: 'bold',
                    size: 'xl',
                    color: '#1DB446'
                },
                {
                    type: 'text',
                    text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
                    size: 'sm',
                    color: '#aaaaaa',
                    margin: 'md'
                }
            ]
        },
        footer: {
            type: 'box',
            layout: 'vertical',
            contents: [
                {
                    type: 'button',
                    style: 'primary',
                    action: {
                        type: 'message',
                        label: '‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÉ‡∏´‡∏°‡πà',
                        text: '#ticket'
                    }
                },
                {
                    type: 'button',
                    action: {
                        type: 'message',
                        label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ticket',
                        text: '#status'
                    },
                    style: 'secondary',
                    margin: 'md'
                }
            ]
        }
    }
};

const createTicketPrompt = {
    type: 'flex',
    altText: '‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÉ‡∏´‡∏°‡πà',
    contents: {
        type: 'bubble',
        body: {
            type: 'box',
            layout: 'vertical',
            contents: [
                {
                    type: 'text',
                    text: 'üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÉ‡∏´‡∏°‡πà',
                    weight: 'bold',
                    size: 'xl'
                },
                {
                    type: 'text',
                    text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                    size: 'sm',
                    color: '#aaaaaa',
                    margin: 'md'
                },
                {
                    type: 'text',
                    text: '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: #ticket ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á...',
                    size: 'sm',
                    color: '#aaaaaa',
                    margin: 'md'
                }
            ]
        }
    }
};

function createTicketStatusFlex(ticket) {
    const statusColors = {
        pending: '#ff9800',
        inProgress: '#2196f3',
        resolved: '#4caf50',
        closed: '#9e9e9e'
    };

    return {
        type: 'flex',
        altText: `Ticket #${ticket.id} Status`,
        contents: {
            type: 'bubble',
            header: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: `Ticket #${ticket.id}`,
                        weight: 'bold',
                        size: 'xl',
                        color: '#ffffff'
                    }
                ],
                backgroundColor: statusColors[ticket.status] || '#1DB446'
            },
            body: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                                size: 'sm',
                                color: '#aaaaaa'
                            },
                            {
                                type: 'text',
                                text: getThaiStatus(ticket.status),
                                size: 'lg',
                                weight: 'bold',
                                margin: 'sm'
                            }
                        ]
                    },
                    {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                                size: 'sm',
                                color: '#aaaaaa'
                            },
                            {
                                type: 'text',
                                text: ticket.issue,
                                wrap: true,
                                margin: 'sm'
                            }
                        ],
                        margin: 'lg'
                    },
                    {
                        type: 'box',
                        layout: 'vertical',
                        contents: [
                            {
                                type: 'text',
                                text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á',
                                size: 'sm',
                                color: '#aaaaaa'
                            },
                            {
                                type: 'text',
                                text: formatDate(ticket.createdAt),
                                margin: 'sm'
                            }
                        ],
                        margin: 'lg'
                    }
                ]
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'button',
                        style: 'primary',
                        action: {
                            type: 'message',
                            label: '‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
                            text: `#chat ${ticket.id}`
                        }
                    },
                    {
                        type: 'button',
                        action: {
                            type: 'message',
                            label: '‡∏•‡∏ö Ticket',
                            text: `#delete ${ticket.id}`
                        },
                        style: 'secondary',
                        margin: 'md',
                        color: '#ff0000'
                    }
                ]
            }
        }
    };
}

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        res.status(405).json({ message: 'Method not allowed' });
        return;
    }

    const events = req.body.events;
    if (!Array.isArray(events) || events.length === 0) {
        res.status(200).json({ message: 'No events to process' });
        return;
    }

    let connection;
    try {
        connection = await getConnection();

        await Promise.all(events.map(async (event) => {
            if (event.type === 'follow') {
                return client.replyMessage(event.replyToken, welcomeMessage);
            }

            if (event.type !== 'message' || event.message.type !== 'text') {
                return null;
            }

            const userId = event.source?.userId;
            const { message, replyToken } = event;

            if (!userId || !event.source?.type === 'user') {
                return null;
            }

            let userProfile;
            try {
                userProfile = await client.getProfile(userId);
            } catch (error) {
                userProfile = { displayName: 'Unknown User' };
            }

            const command = message.text.split(' ')[0].toLowerCase();
            const content = message.text.split(' ').slice(1).join(' ');

            switch (command) {
                case '#ticket':
                    if (!content) {
                        return client.replyMessage(replyToken, createTicketPrompt);
                    }

                    const ticketId = generateTicketId();
                    await connection.execute(QUERIES.CREATE_TICKET, [
                        ticketId,
                        userId,
                        userProfile.displayName,
                        content
                    ]);

                    const [newTicket] = await connection.execute(QUERIES.GET_TICKET, [ticketId, userId]);
                    
                    // Notify staff about new ticket
                    const [staffMembers] = await connection.execute('SELECT userId FROM staff WHERE active = true');
                    for (const staff of staffMembers) {
                        await client.pushMessage(staff.userId, {
                            type: 'text',
                            text: `üì´ New Ticket #${ticketId}\nFrom: ${userProfile.displayName}\nIssue: ${content}`
                        });
                    }

                    return client.replyMessage(replyToken, createTicketStatusFlex(newTicket[0]));

                case '#status':
                    const [tickets] = await connection.execute(QUERIES.GET_USER_TICKETS, [userId]);
                    
                    if (tickets.length === 0) {
                        return client.replyMessage(replyToken, {
                            type: 'flex',
                            altText: '‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket',
                            contents: {
                                type: 'bubble',
                                body: {
                                    type: 'box',
                                    layout: 'vertical',
                                    contents: [
                                        {
                                            type: 'text',
                                            text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ',
                                            weight: 'bold'
                                        }
                                    ]
                                }
                            }
                        });
                    }

                    return client.replyMessage(replyToken, {
                        type: 'flex',
                        altText: 'Ticket Status',
                        contents: {
                            type: 'carousel',
                            contents: tickets.map(ticket => createTicketStatusFlex(ticket).contents)
                        }
                    });

                    case '#chat':
                        if (!content) {
                            return client.replyMessage(replyToken, {
                                type: 'text',
                                text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤'
                            });
                        }
                    
                        const [chatTicket] = await connection.execute(QUERIES.GET_TICKET, [content, userId]);
                        if (chatTicket.length === 0) {
                            return client.replyMessage(replyToken, {
                                type: 'text',
                                text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                            });
                        }
                    
                        try {
                            if (!chatTicket[0].groupChatId) {
                                try {
                                    await createGroupChat(client, connection, chatTicket[0], userProfile);
                                    return client.replyMessage(replyToken, {
                                        type: 'text',
                                        text: `‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ticket #${content}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏ä‡∏ó‡∏Ñ‡πà‡∏∞`
                                    });
                                } catch (error) {
                                    return client.replyMessage(replyToken, {
                                        type: 'text',
                                        text: error.message || '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                                    });
                                }
                            }
                    
                            return client.replyMessage(replyToken, {
                                type: 'text',
                                text: `‚úÖ ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ticket #${content} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏ä‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞`
                            });
                        } catch (error) {
                            console.error('Error handling chat:', error);
                            return client.replyMessage(replyToken, {
                                type: 'text',
                                text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                            });
                        }                    

                case '#delete':
                    if (!content) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö'
                        });
                    }

                    const [deleteTicket] = await connection.execute(QUERIES.GET_TICKET, [content, userId]);
                    if (deleteTicket.length === 0) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                        });
                    }

                    if (deleteTicket[0].groupChatId) {
                        try {
                            await client.leaveGroup(deleteTicket[0].groupChatId);
                        } catch (error) {
                            console.error('Error leaving group:', error);
                        }
                    }

                    await connection.execute(QUERIES.DELETE_TICKET, [content, userId]);
                    return client.replyMessage(replyToken, {
                        type: 'text',
                        text: `‚úÖ ‡∏•‡∏ö Ticket #${content} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
                    });

                case '#help':
                    return client.replyMessage(replyToken, welcomeMessage);

                case '#inprogress':
                    if (!content) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket ‡πÄ‡∏ä‡πà‡∏ô #inprogress TK1234ABCD'
                        });
                    }

                    const staffCheck1 = await isStaff(connection, userId);
                    if (!staffCheck1) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
                        });
                    }

                    const [ticketInProgress] = await connection.execute(QUERIES.GET_TICKET_BY_ID, [content]);
                    if (ticketInProgress.length === 0) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                        });
                    }

                    await connection.execute(QUERIES.UPDATE_TICKET_STATUS, ['inProgress', content]);
                    
                    // Notify customer
                    await client.pushMessage(ticketInProgress[0].userId, {
                        type: 'text',
                        text: `üîÑ Ticket #${content} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`
                    });

                    return client.replyMessage(replyToken, {
                        type: 'text',
                        text: `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ticket #${content} ‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
                    });

                case '#resolved':
                    if (!content) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket ‡πÄ‡∏ä‡πà‡∏ô #resolved TK1234ABCD'
                        });
                    }

                    const staffCheck2 = await isStaff(connection, userId);
                    if (!staffCheck2) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
                        });
                    }

                    const [ticketResolved] = await connection.execute(QUERIES.GET_TICKET_BY_ID, [content]);
                    if (ticketResolved.length === 0) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                        });
                    }

                    await connection.execute(QUERIES.UPDATE_TICKET_STATUS, ['resolved', content]);
                    
                    // Notify customer
                    await client.pushMessage(ticketResolved[0].userId, {
                        type: 'text',
                        text: `‚úÖ Ticket #${content} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß\n‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞`
                    });

                    return client.replyMessage(replyToken, {
                        type: 'text',
                        text: `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ticket #${content} ‡πÄ‡∏õ‡πá‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
                    });

                case '#close':
                    if (!content) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Ticket ‡πÄ‡∏ä‡πà‡∏ô #close TK1234ABCD'
                        });
                    }

                    const staffCheck3 = await isStaff(connection, userId);
                    if (!staffCheck3) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
                        });
                    }

                    const [ticketClose] = await connection.execute(QUERIES.GET_TICKET_BY_ID, [content]);
                    if (ticketClose.length === 0) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ticket ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
                        });
                    }

                    await connection.execute(QUERIES.UPDATE_TICKET_STATUS, ['closed', content]);

                    if (ticketClose[0].groupChatId) {
                        try {
                            await client.pushMessage(ticketClose[0].groupChatId, {
                                type: 'text',
                                text: 'üîí Ticket ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞'
                            });
                            await client.leaveGroup(ticketClose[0].groupChatId);
                        } catch (error) {
                            console.error('Error handling group close:', error);
                        }
                    }

                    // Notify customer
                    await client.pushMessage(ticketClose[0].userId, {
                        type: 'text',
                        text: `üîí Ticket #${content} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏∞`
                    });

                    return client.replyMessage(replyToken, {
                        type: 'text',
                        text: `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ticket #${content} ‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
                    });

                case '#staffhelp':
                    const staffCheck4 = await isStaff(connection, userId);
                    if (!staffCheck4) {
                        return client.replyMessage(replyToken, {
                            type: 'text',
                            text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
                        });
                    }

                    return client.replyMessage(replyToken, {
                        type: 'text',
                        text: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n\n' +
                              '#inprogress [ticket_id] - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"\n' +
                              '#resolved [ticket_id] - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"\n' +
                              '#close [ticket_id] - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"'
                    });

                default:
                    return null;
            }
        }));

        res.status(200).json({ message: 'OK' });
    } catch (err) {
        console.error('Error processing webhook:', err);
        res.status(500).json({ message: 'Internal server error' });
    } finally {
        if (connection) {
            await connection.end();
        }
    }
}

function getThaiStatus(status) {
    const statusMap = {
        pending: 'üìã ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
        inProgress: 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
        resolved: '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß',
        closed: 'üîí ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    };
    return statusMap[status] || status;
}

function formatDate(date) {
    return new Date(date).toLocaleString('th-TH', {
        timeZone: 'Asia/Bangkok'
    });
}